// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_mock is a generated GoMock package.
package service_mock

import (
	models "github.com/code7unner/rest-api-test-task/todos/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method
func (m *MockService) CreateTodo(userID int, title, desc string, t time.Time) (*models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", userID, title, desc, t)
	ret0, _ := ret[0].(*models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo
func (mr *MockServiceMockRecorder) CreateTodo(userID, title, desc, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockService)(nil).CreateTodo), userID, title, desc, t)
}

// UpdateTodo mocks base method
func (m *MockService) UpdateTodo(id, userID int, title, desc string, t time.Time) (*models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, userID, title, desc, t)
	ret0, _ := ret[0].(*models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo
func (mr *MockServiceMockRecorder) UpdateTodo(id, userID, title, desc, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockService)(nil).UpdateTodo), id, userID, title, desc, t)
}

// DeleteTodo mocks base method
func (m *MockService) DeleteTodo(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo
func (mr *MockServiceMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockService)(nil).DeleteTodo), id)
}

// GetAllTodos mocks base method
func (m *MockService) GetAllTodos(userID int) ([]models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodos", userID)
	ret0, _ := ret[0].([]models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodos indicates an expected call of GetAllTodos
func (mr *MockServiceMockRecorder) GetAllTodos(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*MockService)(nil).GetAllTodos), userID)
}

// GetAllCurrentTodos mocks base method
func (m *MockService) GetAllCurrentTodos(userID int, t time.Time) ([]models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCurrentTodos", userID, t)
	ret0, _ := ret[0].([]models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCurrentTodos indicates an expected call of GetAllCurrentTodos
func (mr *MockServiceMockRecorder) GetAllCurrentTodos(userID, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCurrentTodos", reflect.TypeOf((*MockService)(nil).GetAllCurrentTodos), userID, t)
}
