// Code generated by MockGen. DO NOT EDIT.
// Source: todos.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/code7unner/rest-api-test-task/todos/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTodosImpl is a mock of TodosImpl interface
type MockTodosImpl struct {
	ctrl     *gomock.Controller
	recorder *MockTodosImplMockRecorder
}

// MockTodosImplMockRecorder is the mock recorder for MockTodosImpl
type MockTodosImplMockRecorder struct {
	mock *MockTodosImpl
}

// NewMockTodosImpl creates a new mock instance
func NewMockTodosImpl(ctrl *gomock.Controller) *MockTodosImpl {
	mock := &MockTodosImpl{ctrl: ctrl}
	mock.recorder = &MockTodosImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodosImpl) EXPECT() *MockTodosImplMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockTodosImpl) Get(id int) (*models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTodosImplMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodosImpl)(nil).Get), id)
}

// GetAll mocks base method
func (m *MockTodosImpl) GetAll(userID int) ([]models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockTodosImplMockRecorder) GetAll(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodosImpl)(nil).GetAll), userID)
}

// Create mocks base method
func (m *MockTodosImpl) Create(todo *models.Todos) (*models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", todo)
	ret0, _ := ret[0].(*models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTodosImplMockRecorder) Create(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodosImpl)(nil).Create), todo)
}

// Update mocks base method
func (m *MockTodosImpl) Update(todo *models.Todos) (*models.Todos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", todo)
	ret0, _ := ret[0].(*models.Todos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockTodosImplMockRecorder) Update(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodosImpl)(nil).Update), todo)
}

// Delete mocks base method
func (m *MockTodosImpl) Delete(todo *models.Todos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTodosImplMockRecorder) Delete(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodosImpl)(nil).Delete), todo)
}
