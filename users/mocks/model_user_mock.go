// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/code7unner/rest-api-test-task/users/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsersImpl is a mock of UsersImpl interface
type MockUsersImpl struct {
	ctrl     *gomock.Controller
	recorder *MockUsersImplMockRecorder
}

// MockUsersImplMockRecorder is the mock recorder for MockUsersImpl
type MockUsersImplMockRecorder struct {
	mock *MockUsersImpl
}

// NewMockUsersImpl creates a new mock instance
func NewMockUsersImpl(ctrl *gomock.Controller) *MockUsersImpl {
	mock := &MockUsersImpl{ctrl: ctrl}
	mock.recorder = &MockUsersImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersImpl) EXPECT() *MockUsersImplMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockUsersImpl) GetByID(id int) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUsersImplMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersImpl)(nil).GetByID), id)
}

// GetByName mocks base method
func (m *MockUsersImpl) GetByName(name string) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockUsersImplMockRecorder) GetByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUsersImpl)(nil).GetByName), name)
}

// Create mocks base method
func (m *MockUsersImpl) Create(user *models.Users) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsersImplMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersImpl)(nil).Create), user)
}

// Update mocks base method
func (m *MockUsersImpl) Update(user *models.Users) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUsersImplMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersImpl)(nil).Update), user)
}
